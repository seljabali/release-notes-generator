name: Deploy

on:
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: "Environment to deploy"
        required: true
        default: 'staging'
        options:
          - staging
          - prod
  push:
    branches: [ develop ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: npmrcgen
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.NODE_AUTH_TOKEN }}" > .npmrc
          echo "@etipio:registry=https://npm.pkg.github.com/" >> .npmrc

      - name: Install Yarn
        run: npm i yarn -g

      - name: Install Dependencies
        run: |
          yarn install

      - name: Build Staging
        if: (github.event.inputs.deploy_environment == null) || (github.event.inputs.deploy_environment == 'staging')
        run: |
          yarn build-staging

      - name: Build Prod
        if: github.event.inputs.deploy_environment == 'prod'
        run: |
          yarn build-production

      - name: Publish to Staging
        if: (github.event.inputs.deploy_environment == null) || (github.event.inputs.deploy_environment == 'staging')
        run: |
          aws s3 cp --recursive --acl public-read ./build s3://etip-dashboard-staging-deploybucket-1v8nys1pq3bkd/
          aws s3 cp --acl public-read --cache-control="max-age=0, no-cache, no-store, must-revalidate" ./build/index.html s3://etip-dashboard-staging-deploybucket-1v8nys1pq3bkd/
          aws cloudfront create-invalidation --distribution-id E2D63IYQCIN8NK --paths /index.html /sw.js /manifest.webmanifest

      - name: Publish to Production
        if: github.event.inputs.deploy_environment == 'prod'
        run: |
          aws s3 cp --recursive --acl public-read ./build s3://etip-dashboard-prod-12jkcoiyba/
          aws s3 cp --acl public-read --cache-control="max-age=0, no-cache, no-store, must-revalidate" ./build/index.html s3://etip-dashboard-prod-12jkcoiyba/
          aws cloudfront create-invalidation --distribution-id ELADF4BMR76L2 --paths /index.html /sw.js /manifest.webmanifest

  notify:
    needs: deploy
    if: ${{ always() }}
    timeout-minutes: 5
    runs-on: ubuntu-latest
    steps:
      - name: Slack Notification to staging
        if: ${{ (github.event.inputs.deploy_environment == null) || (github.event.inputs.deploy_environment == 'staging') }}
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            { "text": "etip-dashboard\n\n env: staging\n deploy result: ${{ needs.build.result }}\n ${{ github.event.head_commit.url }}" }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_STAGING }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      - name: Slack Notification to production
        if: ${{ github.event.inputs.deploy_environment == 'prod' }}
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            { "text": "etip-dashboard\n\n env: prod\n deploy result: ${{ needs.build.result }}\n ${{ github.event.head_commit.url }}" }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_PROD }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
